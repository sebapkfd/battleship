{"version":3,"sources":["components/Title.js","components/Box.js","components/Table.js","factories/Ship.js","factories/Gameboard.js","factories/Player.js","factories/Game.js","components/Buttons.js","components/Board.js","App.js","index.js"],"names":["Title","className","Box","props","id","attack","tableName","useState","boxType","setBoxType","onClick","attackResult","Table","selectMove","selectPos","status","display","handleSelect","pos","boxArray","i","newBox","push","tableStatus","Ship","size","Array","fill","hit","position","isSunk","includes","Gameboard","positions","length","occupied","ship","shipPos","isHit","ships","placeShip","cord","dir","newShip","lastPos","Math","floor","placeHorizontally","placeVertically","receiveAttack","allSunk","aux","forEach","availableShips","count","Player","board","posHit","randomAttack","enemyBoard","mov","random","randomPlace","combo","possibleAttacks","Game","Player1","Player2","defaultPos","isFinished","Buttons","shipSize","started","direction","changeDirection","restartGame","sizeButton","directionButton","restartButton","Board","newGame","setNewGame","setStarted","resetKey","setResetKey","setShipSize","setDirection","winner","setWinner","user","pc","userAlive","setUserAlive","pcAlive","setPcAlive","updateAlive","boardToUpdate","shipsAlive","pcTurn","mode","prevAttack","result","boxAttacked","document","getElementById","turns","attackHit","displayWinner","placeFleets","parseInt","displayShips","userTable","pcTable","instruction","winnerMsg","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9d257504.chunk.js","sourcesContent":["const Title = () => {\n    return (\n        <div className=\"title\">\n            <h1>BattleShip</h1>\n        </div>\n    )\n}\n\nexport default Title;","import React, {useState} from 'react';\n\nconst Box = (props) => {\n    const {id, attack, tableName} = props;\n    const [boxType, setBoxType] = useState('box');\n\n    const handleClick = () => {\n        if(tableName === 'Pc'){\n            const attackResult = attack(id);\n            if (attackResult === null) {\n            }\n            else if(attackResult){\n                setBoxType('hit-box');\n            }else if(!attackResult){\n                setBoxType('no-hit-box');\n            }\n            return\n        }\n        return attack(id);\n    }\n\n    return (\n        <div \n            className={boxType}\n            id={`${tableName}${id}`}\n            onClick={handleClick}\n        >\n        </div>\n    )\n}\n\nexport default Box;","import React from 'react';\nimport Box from './Box';\n\nconst Table = (props) => {\n    \n    const {selectMove, tableName, selectPos, status, display} = props;\n\n    const handleSelect = (pos) => {\n        if(tableName === 'Pc'){\n            return selectMove(pos);   \n        }\n        return selectPos(pos);\n    }\n\n    const boxArray = [];\n    for (let i = 0; i < 100; i++) {\n        const newBox = <Box \n                        key={i}\n                        id={i}\n                        tableName={tableName}\n                        attack={handleSelect}\n                        />\n        boxArray.push(newBox);\n    }\n\n    let tableStatus = (display) ? <h2>{status} Ships Available {display}</h2>: null;\n\n    return (\n        <div>\n            <div className='table-name'>\n                <h2>{tableName} Board</h2>\n            </div>\n            <div className='table-status'>\n                {tableStatus}\n            </div>\n            <div className='table'>\n                {boxArray}\n            </div>\n        </div>\n    )\n}\n\nexport default Table;","const Ship = (size) => {\n\n    const status = Array(size).fill(false)\n\n    const hit = (position) => {\n        if(!status[position]) {\n            status[position] = true;\n        }\n    }\n\n    const isSunk = () => {\n        return !status.includes(false)\n    }\n\n    const newShip = {\n        size,\n        status,\n        hit,\n        isSunk\n    }\n    \n    return newShip;\n}\n\nexport default Ship;","import Ship from './Ship';\n\nconst Gameboard = () => {\n    \n    let positions = Array(100);\n    for (let i = 0; i < positions.length; i++) {\n        positions[i] = {\n            occupied: false,\n            ship: null,\n            shipPos: null,\n            isHit: false\n        }\n    }\n    let ships = [];\n\n    const placeVertically = (ship, cord) => {\n        const lastPos = cord + (ship.size-1)*10;\n        if(lastPos > 99) {\n            return false\n        }\n\n        for(let i = cord; i <= lastPos; i+= 10) {\n            if(positions[i].occupied) {\n                return false;\n            }\n        }\n\n        for(let i = cord; i <= lastPos; i+= 10) {\n            positions[i].ship = ship;\n            positions[i].occupied = true;\n            positions[i].shipPos = (i - cord)/10;\n        }\n        ships.push(ship);\n        return true;\n    }\n\n    const placeHorizontally = (ship, cord) => {\n        const lastPos = cord + ship.size - 1;\n        if(Math.floor(cord/10) !== Math.floor(lastPos/10)) {\n            return false\n        }\n\n        for(let i = cord; i <= lastPos; i++) {\n            if(positions[i].occupied){\n                return false\n            }\n        }\n\n        for(let i = cord; i <= lastPos; i++) {\n            positions[i].ship = ship;\n            positions[i].occupied = true;\n            positions[i].shipPos = i - cord;\n        }\n        ships.push(ship);\n        return true;\n    }\n\n    const placeShip = (size, cord, dir) => {\n        let newShip = Ship(size);\n        if(dir === 'horizontal'){\n            return placeHorizontally(newShip, cord);\n        }\n       return placeVertically(newShip, cord);\n    }\n\n    const receiveAttack = (cord) => {\n        if(!positions[cord].occupied) {\n            positions[cord].isHit = true;\n            return false\n        }\n        else if (positions[cord].occupied) {\n            positions[cord].isHit = true;\n            positions[cord].ship.hit(positions[cord].shipPos)\n            return true\n        }\n    }\n    \n    const allSunk = () => {\n        let aux = true;\n        ships.forEach(ship => {\n            if(ship.isSunk() === false){\n                aux = false;\n            }\n        })\n        return aux;\n    }\n\n    const availableShips = () => {\n        let count = 0;\n        ships.forEach(ship => {\n            if(ship.isSunk() === false){\n                count++;\n            }\n        })\n        return count;\n    }\n\n    const board = {\n        positions,\n        placeShip,\n        receiveAttack,\n        allSunk,\n        availableShips\n    };\n\n    return board;\n}\n\nexport default Gameboard;","import Gameboard from './Gameboard'\n\nconst Player = () => {\n\n    const board = Gameboard();\n    const posHit = [];\n\n    const randomAttack = (enemyBoard) => {\n        if(posHit.length === 100) {\n            return {isHit: null, mov: -1}\n        }\n        let mov;\n        while (true) {\n            mov = Math.floor(Math.random() * 100); \n            if(!posHit.includes(mov)){\n                break;\n            }\n        }\n        const isHit = enemyBoard.receiveAttack(mov);\n        posHit.push(mov);\n        return {isHit, mov};\n    }\n\n    const combo = (pos, enemyBoard) => {\n        let possibleAttacks = [];\n        if(pos + 10 < 99 && !posHit.includes(pos + 10)) {\n            possibleAttacks.push(pos + 10);\n        }\n        if(pos - 10 > 0 && !posHit.includes(pos - 10)) {\n            possibleAttacks.push(pos - 10);\n        }\n        if((pos - 1)%10 !== 9 && !posHit.includes(pos - 1)) {\n            possibleAttacks.push(pos - 1)\n        }\n        if( (pos + 1)%10 !==1 && !posHit.includes(pos + 1)) {\n            possibleAttacks.push(pos + 1)\n        }\n        if (possibleAttacks.length === 0) {\n            return randomAttack(enemyBoard);\n        }\n        else {\n            let mov = possibleAttacks[Math.floor(Math.random() * possibleAttacks.length)];\n            const isHit = enemyBoard.receiveAttack(mov);\n            posHit.push(mov);\n            return {isHit, mov};\n        }\n    }\n\n    const randomPlace = (size) => {\n        let pos;\n        let dirOpt = ['horizontal', 'vertical'];\n        let dir = dirOpt[Math.floor(Math.random() * 2)];\n        while (true) {\n            pos = Math.floor(Math.random() * 100);\n            if(board.placeShip(size, pos, dir)){\n                break\n            }\n        }\n        return pos\n    }\n\n    const attack = (enemyBoard, pos) => {\n        if(posHit.length === 100 || posHit.includes(pos)) {\n            return null\n        }\n        const isHit = enemyBoard.receiveAttack(pos);\n        posHit.push(pos);\n        return isHit;\n    }\n\n    const User = {\n        board,\n        randomAttack,\n        randomPlace,\n        attack,\n        combo\n    }\n\n    return User;\n}\n\nexport default Player;","import Player from './Player';\n\nconst Game = () => {\n    const Player1 = Player();\n    const Player2 = Player();\n\n    const defaultPos = () => {\n        for(let i = 0; i < 1; i++){\n            Player1.board.placeShip(3, 0);\n            Player2.board.placeShip(3, 0);\n        }\n        return true\n    }\n\n    const isFinished = () => {\n        if(Player1.board.allSunk() || Player2.board.allSunk()){\n            return true\n        }\n        return false\n    }\n\n    return {\n        Player1,\n        Player2,\n        defaultPos,\n        isFinished\n    }\n}\n\nexport default Game;","import React from 'react';\n\nconst Buttons = (props) => {\n\n    const {shipSize, started, direction, changeDirection, restartGame} = props;\n\n    let sizeButton = (shipSize > 1) ? <button>Ship size: {shipSize}</button>: null;\n    let directionButton = (started) ? null : <button onClick={changeDirection}>{direction}</button>;\n    let restartButton = <button onClick={restartGame}>Restart</button>\n\n    return (\n        <div className = 'buttons'>\n            {restartButton}\n            {directionButton}\n            {sizeButton}\n        </div>\n    )\n}\n\nexport default Buttons;","import React, {useState} from 'react';\nimport Table from './Table';\nimport Game from '../factories/Game';\nimport Buttons from './Buttons';\n\nconst Board = () => {\n    const [newGame, setNewGame] = useState(Game());\n    const [started, setStarted] = useState(false);\n    const [resetKey, setResetKey] = useState(0);\n    const [shipSize, setShipSize] = useState(5);\n    const [direction, setDirection] = useState('horizontal');\n    const [winner, setWinner] = useState(null);\n    const user = newGame.Player1;\n    const pc = newGame.Player2;\n    const [userAlive, setUserAlive] = useState(4);\n    const [pcAlive, setPcAlive] = useState(4);\n\n    const restartGame = () => {\n        setNewGame(Game());\n        setStarted(false);\n        setResetKey(resetKey + 1)\n        setShipSize(5);\n        setWinner(null);\n        setUserAlive(4);\n        setPcAlive(4);\n    }\n\n    const changeDirection = () => {\n        if(direction === 'horizontal') {\n            setDirection('vertical')\n        }\n        else {\n            setDirection('horizontal')\n        }\n    }\n\n    const updateShipsAlive = () => {\n        if(shipSize > 1) {\n            setShipSize(shipSize - 1);\n        }\n    }\n\n    const updateAlive = (boardToUpdate) => {\n        if(boardToUpdate === 'Pc') {\n            let shipsAlive = pc.board.availableShips();\n            setPcAlive(shipsAlive);\n        }\n        else if(boardToUpdate === 'User') {\n            let shipsAlive = user.board.availableShips();\n            setUserAlive(shipsAlive);\n        }\n    }\n\n    const pcTurn = (mode, prevAttack) => {\n        let result;\n        if (mode === 'combo') {\n            result = pc.combo(prevAttack, user.board);\n        }else {\n            result = pc.randomAttack(user.board);\n        }\n\n        if(result.isHit === null){\n        }\n        let boxAttacked = document.getElementById(`User${result.mov}`);\n        if (result.isHit) {\n            boxAttacked.className = 'hit-box';\n            pcTurn('combo', result.mov);\n        }else {\n            boxAttacked.className = 'no-hit-box';\n        }\n    }\n\n    const turns = (pos) => {\n        if(newGame.isFinished() || !started){\n            return null;\n        }\n        const attackHit = user.attack(pc.board, pos);\n        updateAlive('Pc')\n        if (attackHit === null){\n            return null\n        }\n        else if(!attackHit) {\n            pcTurn(null);\n        }\n        updateAlive('User')\n        displayWinner();\n        return attackHit;\n    }\n\n    const displayShips = (size, id, dir) => {\n       let boxAttacked;\n       if(dir === 'horizontal') {\n           const lastPos = parseInt(id) + size - 1;\n           for(let i = id; i <= lastPos; i++) {\n               boxAttacked = document.getElementById(`User${i}`);\n               if (boxAttacked.className !== 'box-selected') {\n                   boxAttacked.className = 'box-selected';\n                }\n            }\n       }\n       else if(dir ==='vertical') {\n           const lastPos = id + (size-1)*10;\n           for(let i = id; i <= lastPos; i+= 10) {\n               boxAttacked = document.getElementById(`User${i}`);\n               if (boxAttacked.className !== 'box-selected') {\n                   boxAttacked.className = 'box-selected';\n                }\n            }\n        }\n    }\n\n    const placeFleets = (id) => {\n        if(!started) {\n            const userResult = user.board.placeShip(shipSize, id, direction);\n            if(userResult) {\n                displayShips(shipSize, id, direction);\n                pc.randomPlace(shipSize);\n                updateShipsAlive();\n                if(shipSize === 2) {\n                    setStarted(true);\n                }\n            }\n        }\n    }\n\n    const displayWinner = () => {\n        if(newGame.isFinished() && started) {\n            if(user.board.allSunk()) {\n                setWinner('Pc')\n            }\n            else if(pc.board.allSunk()) {\n                setWinner('User');\n            }\n            return true\n        }\n        return false;\n    }\n\n    let userTable = <Table\n                        key={`A${resetKey}`} \n                        selectMove={turns} \n                        selectPos={placeFleets} \n                        tableName='User'\n                        status={userAlive}\n                        display={started}\n                        />;\n                            \n    let pcTable = <Table\n                    key={`B${resetKey}`}\n                    selectMove={turns}\n                    selectPos={placeFleets} \n                    tableName='Pc'\n                    status={pcAlive}\n                    display={started}\n                    />;\n    \n    let instruction = (started) ? <h3>Attack the enemy</h3>: <h3> Place your ships on the User Board</h3> \n    let winnerMsg = (winner) ? <h3> {winner} wins!</h3> : null;\n\n    return (\n        <div className='board'>\n            <div className = 'buttons-ins'>{/* Maybe buttons on new Component */}\n                <Buttons\n                    shipSize={shipSize}\n                    started={started}\n                    direction={direction}\n                    changeDirection={changeDirection}\n                    restartGame={restartGame}\n                />\n                {instruction}\n                {winnerMsg}\n            </div>\n            <div className='tables-display'>\n                {userTable}\n                {pcTable}\n            </div>\n        </div>\n    )\n}\n\nexport default Board;","import './App.css';\nimport Title from './components/Title';\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title/>\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}