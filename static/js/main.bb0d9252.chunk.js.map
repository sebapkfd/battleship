{"version":3,"sources":["components/Title.js","components/Box.js","components/Table.js","factories/Ship.js","factories/Gameboard.js","factories/Player.js","factories/Game.js","components/Board.js","App.js","index.js"],"names":["Title","className","Box","props","id","attack","tableName","useState","boxType","setBoxType","onClick","attackResult","Table","selectMove","selectPos","handleSelect","pos","boxArray","i","newBox","push","Ship","size","status","Array","fill","hit","position","isSunk","includes","Gameboard","positions","length","occupied","ship","shipPos","isHit","ships","placeShip","cord","dir","newShip","lastPos","Math","floor","placeHorizontally","placeVertically","receiveAttack","allSunk","aux","forEach","Player","board","posHit","randomAttack","enemyBoard","mov","random","randomPlace","Game","Player1","Player2","defaultPos","isFinished","console","log","Board","newGame","setNewGame","started","setStarted","resetKey","setResetKey","shipSize","setShipSize","direction","setDirection","user","pc","pcTurn","result","boxAttacked","document","getElementById","turns","attackHit","placeFleets","parseInt","displayShips","userTable","pcTable","sizeButton","directionButton","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bb0d9252.chunk.js","sourcesContent":["const Title = () => {\n    return (\n        <div className=\"title\">\n            <h1>BattleShip</h1>\n        </div>\n    )\n}\n\nexport default Title;","import React, {useState} from 'react';\n\nconst Box = (props) => {\n    const {id, attack, tableName} = props;\n    const [boxType, setBoxType] = useState('box');\n\n    const handleClick = () => {\n        if(tableName === 'pc'){\n            const attackResult = attack(id);\n            if (attackResult === null) {\n            }\n            else if(attackResult){\n                setBoxType('hit-box');\n            }else if(!attackResult){\n                setBoxType('no-hit-box');\n            }\n            return\n        }\n        return attack(id);\n    }\n\n    return (\n        <div \n            className={boxType}\n            id={`${tableName}${id}`}\n            onClick={handleClick}\n        >\n        </div>\n    )\n}\n\nexport default Box;","import React from 'react';\nimport Box from './Box';\n\nconst Table = (props) => {\n    \n    const {selectMove, tableName, selectPos} = props;\n\n    const handleSelect = (pos) => {\n        if(tableName === 'pc'){\n            return selectMove(pos);   \n        }\n        return selectPos(pos);\n    }\n\n    const boxArray = [];\n    for (let i = 0; i < 100; i++) {\n        const newBox = <Box \n                        key={i}\n                        id={i}\n                        tableName={tableName}\n                        attack={handleSelect}\n                        />\n        boxArray.push(newBox);\n    }\n\n    return (\n        <div>\n            <div className='tablename'>\n                <h2>{tableName} Table</h2>\n            </div>\n            <div className='table'>\n                {boxArray}\n            </div>\n        </div>\n    )\n}\n\nexport default Table;","const Ship = (size) => {\n\n    const status = Array(size).fill(false)\n\n    const hit = (position) => {\n        if(!status[position]) {\n            status[position] = true;\n        }\n    }\n\n    const isSunk = () => {\n        return !status.includes(false)\n    }\n\n    const newShip = {\n        size,\n        status,\n        hit,\n        isSunk\n    }\n    \n    return newShip;\n}\n\nexport default Ship;","import Ship from './Ship';\n\nconst Gameboard = () => { //Only adding horizontally\n    \n    let positions = Array(100);\n    for (let i = 0; i < positions.length; i++) {\n        positions[i] = {\n            occupied: false,\n            ship: null,\n            shipPos: null,\n            isHit: false\n        }\n    }\n    let ships = [];\n\n    const placeVertically = (ship, cord) => {\n        const lastPos = cord + (ship.size-1)*10;\n        if(lastPos > 99) {\n            return false\n        }\n\n        for(let i = cord; i <= lastPos; i+= 10) {\n            if(positions[i].occupied) {\n                return false;\n            }\n        }\n\n        for(let i = cord; i <= lastPos; i+= 10) {\n            positions[i].ship = ship;\n            positions[i].occupied = true;\n            positions[i].shipPos = (i - cord)/10;\n        }\n        ships.push(ship);\n        return true;\n    }\n\n    const placeHorizontally = (ship, cord) => {\n        const lastPos = cord + ship.size - 1;\n        if(Math.floor(cord/10) !== Math.floor(lastPos/10)) {\n            return false\n        }\n\n        for(let i = cord; i <= lastPos; i++) {\n            if(positions[i].occupied){\n                return false\n            }\n        }\n\n        for(let i = cord; i <= lastPos; i++) {\n            positions[i].ship = ship;\n            positions[i].occupied = true;\n            positions[i].shipPos = i - cord;\n        }\n        ships.push(ship);\n        return true;\n    }\n\n    const placeShip = (size, cord, dir) => {\n        let newShip = Ship(size);\n        if(dir === 'horizontal'){\n            return placeHorizontally(newShip, cord);\n        }\n       return placeVertically(newShip, cord);\n    }\n\n    const receiveAttack = (cord) => {\n        if(!positions[cord].occupied) {\n            positions[cord].isHit = true;\n            return false\n        }\n        else if (positions[cord].occupied) {\n            positions[cord].isHit = true;\n            positions[cord].ship.hit(positions[cord].shipPos)\n            return true\n        }\n    }\n    \n    const allSunk = () => {\n        let aux = true;\n        ships.forEach(ship => {\n            if(ship.isSunk() === false){\n                aux = false;\n            }\n        })\n        return aux;\n    }\n\n    const board = {\n        positions,\n        placeShip,\n        receiveAttack,\n        allSunk\n    };\n\n    return board;\n}\n\nexport default Gameboard;","import Gameboard from './Gameboard'\n\nconst Player = () => {\n\n    const board = Gameboard();\n    const posHit = [];\n\n    const randomAttack = (enemyBoard) => {\n        if(posHit.length === 100) {\n            return {isHit: null, mov: -1}\n        }\n        let mov;\n        while (true) {\n            mov = Math.floor(Math.random() * 100); \n            if(!posHit.includes(mov)){\n                break;\n            }\n        }\n        const isHit = enemyBoard.receiveAttack(mov);\n        posHit.push(mov);\n        return {isHit, mov};\n    }\n\n    const randomPlace = (size) => {\n        let pos;\n        let dirOpt = ['horizontal', 'vertical'];\n        let dir = dirOpt[Math.floor(Math.random() * 2)];\n        while (true) {\n            pos = Math.floor(Math.random() * 100);\n            if(board.placeShip(size, pos, dir)){\n                break\n            }\n        }\n        return pos\n    }\n\n    const attack = (enemyBoard, pos) => {\n        if(posHit.length === 100 || posHit.includes(pos)) {\n            return null\n        }\n        const isHit = enemyBoard.receiveAttack(pos);\n        posHit.push(pos);\n        return isHit;\n    }\n\n    const User = {\n        board,\n        randomAttack,\n        randomPlace,\n        attack\n    }\n\n    return User;\n}\n\nexport default Player;","import Player from './Player';\n\nconst Game = () => {\n    const Player1 = Player();\n    const Player2 = Player();\n\n    const defaultPos = () => {\n        for(let i = 0; i < 1; i++){\n            Player1.board.placeShip(3, 0);\n            Player2.board.placeShip(3, 0);\n        }\n        return true\n    }\n\n    const isFinished = () => {\n        if(Player1.board.allSunk() || Player2.board.allSunk()){\n            console.log('Game Over');\n            return true\n        }\n        return false\n    }\n\n    return {\n        Player1,\n        Player2,\n        defaultPos,\n        isFinished\n    }\n}\n\nexport default Game;","import React, {useState} from 'react';\nimport Table from './Table';\nimport Game from '../factories/Game';\n\nconst Board = () => {\n    const [newGame, setNewGame] = useState(Game());\n    const [started, setStarted] = useState(false);\n    const [resetKey, setResetKey] = useState(0);\n    const [shipSize, setShipSize] = useState(5);\n    const [direction, setDirection] = useState('horizontal');\n    const user = newGame.Player1;\n    const pc = newGame.Player2;\n\n    const restartGame = () => {\n        setNewGame(Game());\n        setStarted(false);\n        setResetKey(resetKey + 1)\n        setShipSize(5);\n    }\n\n    const changeDirection = () => {\n        if(direction === 'horizontal') {\n            setDirection('vertical')\n        }\n        else {\n            setDirection('horizontal')\n        }\n    }\n\n    const updateShips = () => {\n        if(shipSize > 1) {\n            setShipSize(shipSize - 1);\n        }\n    }\n\n    const pcTurn = () => {\n        let result = pc.randomAttack(user.board);\n        if(result.isHit === null){\n        }\n        let boxAttacked = document.getElementById(`user${result.mov}`);\n        if (result.isHit) {\n            boxAttacked.className = 'hit-box';\n        }else {\n            boxAttacked.className = 'no-hit-box';\n        }\n    }\n\n    const turns = (pos) => {\n        if(newGame.isFinished() || !started){\n            return null;\n        }\n        const attackHit = user.attack(pc.board, pos);\n        if (attackHit === null){\n            return null\n        }\n        else if(attackHit){\n            pcTurn();\n            return true    \n        }\n        else if (!attackHit){\n            pcTurn();\n            return false\n        }\n    }\n\n    const displayShips = (size, id, dir) => {\n       let boxAttacked;\n       if(dir === 'horizontal') {\n           const lastPos = parseInt(id) + size - 1;\n           for(let i = id; i <= lastPos; i++) {\n               boxAttacked = document.getElementById(`user${i}`);\n               if (boxAttacked.className !== 'box-selected') {\n                   boxAttacked.className = 'box-selected';\n                }\n            }\n       }\n       else if(dir ==='vertical') {\n           const lastPos = id + (size-1)*10;\n           for(let i = id; i <= lastPos; i+= 10) {\n               boxAttacked = document.getElementById(`user${i}`);\n               if (boxAttacked.className !== 'box-selected') {\n                   boxAttacked.className = 'box-selected';\n                }\n            }\n        }\n    }\n\n    const placeFleets = (id) => {\n        if(!started) {\n            const userResult = user.board.placeShip(shipSize, id, direction);\n            if(userResult) {\n                displayShips(shipSize, id, direction);\n                pc.randomPlace(shipSize);\n                updateShips();\n                if(shipSize === 2) {\n                    setStarted(true);\n                    console.log('Game Starts');\n                }\n            }\n        }\n    }\n\n    let userTable = <Table key={`A${resetKey}`} selectMove={turns} selectPos={placeFleets} tableName='user'/>;\n    let pcTable = <Table key={`B${resetKey}`} selectMove={turns} selectPos={placeFleets} tableName='pc'/>;\n    let sizeButton = (shipSize > 1) ? <button>Ship size: {shipSize}</button>: null;\n    let directionButton = (started) ? null : <button onClick={changeDirection}>{direction}</button>;\n\n    return (\n        <div className='board'>\n            <button onClick={restartGame}>Clean</button>\n            {directionButton}\n            {sizeButton}\n            <div className='tables-display'>\n                {userTable}\n                {pcTable}\n            </div>\n        </div>\n    )\n}\n\nexport default Board;","import './App.css';\nimport Title from './components/Title';\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title/>\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}