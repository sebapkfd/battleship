{"version":3,"sources":["components/Title.js","components/Box.js","components/Table.js","factories/Ship.js","factories/Gameboard.js","factories/Player.js","factories/Game.js","components/Buttons.js","components/Result.js","components/Board.js","components/Footer.js","App.js","index.js"],"names":["Title","className","Box","props","values","id","attack","tableName","useState","boxType","setBoxType","onClick","attackResult","Table","turns","placeFleets","started","status","boxArray","boxValues","pos","i","newBox","push","tableStatus","Ship","size","Array","fill","hit","position","isSunk","includes","Gameboard","positions","length","occupied","ship","shipPos","isHit","ships","placeShip","cord","dir","newShip","lastPos","Math","floor","placeHorizontally","placeVertically","receiveAttack","allSunk","aux","forEach","availableShips","count","Player","board","posHit","possibleAttacks","randomAttack","enemyBoard","mov","random","randomPlace","combo","indexToAttack","splice","setPossibleAttacks","Game","Player1","Player2","defaultPos","isFinished","Buttons","shipSize","direction","changeDirection","restartGame","sizeButton","directionButton","restartButton","Result","winner","message","Board","newGame","setNewGame","setStarted","resetKey","setResetKey","setShipSize","setDirection","setWinner","user","pc","userAlive","setUserAlive","pcAlive","setPcAlive","updateAlive","boardToUpdate","shipsAlive","pcTurn","mode","result","boxAttacked","document","getElementById","displayWinner","instruction","buttonValues","tableValues","attackHit","parseInt","displayShips","userValues","pcValues","pcTable","Footer","href","target","rel","src","alt","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6d8efbd4.chunk.js","sourcesContent":["const Title = () => {\r\n    return (\r\n        <div className=\"title\">\r\n            <h1>BattleShip</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title;","import React, {useState} from 'react';\r\n\r\nconst Box = (props) => {\r\n    const {id, attack, tableName} = props.values;\r\n    const [boxType, setBoxType] = useState('box');\r\n\r\n    const handleClick = () => {\r\n        if(tableName === 'Pc'){\r\n            const attackResult = attack(id);\r\n            if (attackResult === null) {\r\n            }\r\n            else if(attackResult){\r\n                setBoxType('hit-box');\r\n            }else if(!attackResult){\r\n                setBoxType('no-hit-box');\r\n            }\r\n            return\r\n        }\r\n        return attack(id);\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={boxType}\r\n            id={`${tableName}${id}`}\r\n            onClick={handleClick}\r\n        >\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Box;","import React from 'react';\r\nimport Box from './Box';\r\n\r\nconst Table = (props) => {\r\n    const {turns, placeFleets, started, tableName, status} = props.values;\r\n\r\n    const attack = (pos) => {\r\n        if(tableName === 'Pc'){\r\n            return turns(pos);   \r\n        }\r\n        return placeFleets(pos);\r\n    }\r\n\r\n    const boxArray = [];\r\n    const boxValues = {attack, tableName}\r\n    for (let i = 0; i < 100; i++) {\r\n        let newBox = <Box key={i} values={{...boxValues, id: i}}/>\r\n        boxArray.push(newBox);\r\n    }\r\n\r\n    const tableStatus = (started) ? <h2>{status} Ships Available {started}</h2>: null;\r\n\r\n    return (\r\n        <div>\r\n            <div className='table-name'>\r\n                <h2>{tableName} Board</h2>\r\n            </div>\r\n            <div className='table-status'>\r\n                {tableStatus}\r\n            </div>\r\n            <div className='table'>\r\n                {boxArray}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","const Ship = (size) => {\r\n\r\n    const status = Array(size).fill(false)\r\n\r\n    const hit = (position) => {\r\n        if(!status[position]) {\r\n            status[position] = true;\r\n        }\r\n    }\r\n\r\n    const isSunk = () => {\r\n        return !status.includes(false)\r\n    }\r\n\r\n    const newShip = {\r\n        size,\r\n        status,\r\n        hit,\r\n        isSunk\r\n    }\r\n    \r\n    return newShip;\r\n}\r\n\r\nexport default Ship;","import Ship from './Ship';\r\n\r\nconst Gameboard = () => {\r\n    \r\n    let positions = Array(100);\r\n    for (let i = 0; i < positions.length; i++) {\r\n        positions[i] = {\r\n            occupied: false,\r\n            ship: null,\r\n            shipPos: null,\r\n            isHit: false\r\n        }\r\n    }\r\n    let ships = [];\r\n\r\n    const placeVertically = (ship, cord) => {\r\n        const lastPos = cord + (ship.size-1)*10;\r\n        if(lastPos > 99) {\r\n            return false\r\n        }\r\n\r\n        for(let i = cord; i <= lastPos; i+= 10) {\r\n            if(positions[i].occupied) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for(let i = cord; i <= lastPos; i+= 10) {\r\n            positions[i].ship = ship;\r\n            positions[i].occupied = true;\r\n            positions[i].shipPos = (i - cord)/10;\r\n        }\r\n        ships.push(ship);\r\n        return true;\r\n    }\r\n\r\n    const placeHorizontally = (ship, cord) => {\r\n        const lastPos = cord + ship.size - 1;\r\n        if(Math.floor(cord/10) !== Math.floor(lastPos/10)) {\r\n            return false\r\n        }\r\n\r\n        for(let i = cord; i <= lastPos; i++) {\r\n            if(positions[i].occupied){\r\n                return false\r\n            }\r\n        }\r\n\r\n        for(let i = cord; i <= lastPos; i++) {\r\n            positions[i].ship = ship;\r\n            positions[i].occupied = true;\r\n            positions[i].shipPos = i - cord;\r\n        }\r\n        ships.push(ship);\r\n        return true;\r\n    }\r\n\r\n    const placeShip = (size, cord, dir) => {\r\n        let newShip = Ship(size);\r\n        if(dir === 'horizontal'){\r\n            return placeHorizontally(newShip, cord);\r\n        }\r\n       return placeVertically(newShip, cord);\r\n    }\r\n\r\n    const receiveAttack = (cord) => {\r\n        if(!positions[cord].occupied) {\r\n            positions[cord].isHit = true;\r\n            return false\r\n        }\r\n        else if (positions[cord].occupied) {\r\n            positions[cord].isHit = true;\r\n            positions[cord].ship.hit(positions[cord].shipPos)\r\n            return true\r\n        }\r\n    }\r\n    \r\n    const allSunk = () => {\r\n        let aux = true;\r\n        ships.forEach(ship => {\r\n            if(ship.isSunk() === false){\r\n                aux = false;\r\n            }\r\n        })\r\n        return aux;\r\n    }\r\n\r\n    const availableShips = () => {\r\n        let count = 0;\r\n        ships.forEach(ship => {\r\n            if(ship.isSunk() === false){\r\n                count++;\r\n            }\r\n        })\r\n        return count;\r\n    }\r\n\r\n    const board = {\r\n        positions,\r\n        placeShip,\r\n        receiveAttack,\r\n        allSunk,\r\n        availableShips\r\n    };\r\n\r\n    return board;\r\n}\r\n\r\nexport default Gameboard;","import Gameboard from './Gameboard'\r\n\r\nconst Player = () => {\r\n    const board = Gameboard();\r\n    const posHit = [];\r\n    let possibleAttacks = [];\r\n\r\n    const randomAttack = (enemyBoard) => {\r\n        if(posHit.length === 100) {\r\n            return {isHit: null, mov: -1}\r\n        }\r\n        let mov;\r\n        while (true) {\r\n            mov = Math.floor(Math.random() * 100); \r\n            if(!posHit.includes(mov)){\r\n                break;\r\n            }\r\n        }\r\n        const isHit = enemyBoard.receiveAttack(mov);\r\n        posHit.push(mov);\r\n        return {isHit, mov};\r\n    }\r\n\r\n    const setPossibleAttacks = (pos) => {\r\n        if(pos + 10 < 99 && !posHit.includes(pos + 10) && !possibleAttacks.includes(pos + 10)) {\r\n            possibleAttacks.push(pos + 10);\r\n        }\r\n        if(pos - 10 > 0 && !posHit.includes(pos - 10) && !possibleAttacks.includes(pos - 10)) {\r\n            possibleAttacks.push(pos - 10);\r\n        }\r\n        if( !(pos%10 === 0 && (pos - 1)%10 === 9) && !posHit.includes(pos - 1) && (pos - 1 >= 0) && !possibleAttacks.includes(pos - 1)) {\r\n            possibleAttacks.push(pos - 1)\r\n        }\r\n        if( !(pos%10 === 9 && (pos + 1)%10 === 0) && !posHit.includes(pos + 1) && (pos + 1 <= 99) && !possibleAttacks.includes(pos + 1)) {\r\n            possibleAttacks.push(pos + 1)\r\n        }\r\n    }\r\n\r\n    const combo = (enemyBoard) => {\r\n        if (possibleAttacks.length === 0) {\r\n            return randomAttack(enemyBoard);\r\n        }\r\n        else {\r\n            let indexToAttack = Math.floor(Math.random() * possibleAttacks.length);\r\n            let mov = possibleAttacks[indexToAttack];\r\n            possibleAttacks.splice(indexToAttack, 1)\r\n            const isHit = enemyBoard.receiveAttack(mov);\r\n            posHit.push(mov);\r\n            return {isHit, mov};\r\n        }\r\n    }\r\n\r\n    const randomPlace = (size) => {\r\n        let pos;\r\n        let dirOpt = ['horizontal', 'vertical'];\r\n        let dir = dirOpt[Math.floor(Math.random() * 2)];\r\n        while (true) {\r\n            pos = Math.floor(Math.random() * 100);\r\n            if(board.placeShip(size, pos, dir)){\r\n                break\r\n            }\r\n        }\r\n        return pos\r\n    }\r\n\r\n    const attack = (enemyBoard, pos) => {\r\n        if(posHit.length === 100 || posHit.includes(pos)) {\r\n            return null\r\n        }\r\n        const isHit = enemyBoard.receiveAttack(pos);\r\n        posHit.push(pos);\r\n        return isHit;\r\n    }\r\n\r\n    const User = {\r\n        board,\r\n        possibleAttacks,\r\n        randomAttack,\r\n        randomPlace,\r\n        attack,\r\n        combo,\r\n        setPossibleAttacks\r\n    }\r\n\r\n    return User;\r\n}\r\n\r\nexport default Player;","import Player from './Player';\r\n\r\nconst Game = () => {\r\n    const Player1 = Player();\r\n    const Player2 = Player();\r\n\r\n    const defaultPos = () => {\r\n        for(let i = 0; i < 1; i++){\r\n            Player1.board.placeShip(3, 0);\r\n            Player2.board.placeShip(3, 0);\r\n        }\r\n        return true\r\n    }\r\n\r\n    const isFinished = () => {\r\n        if(Player1.board.allSunk() || Player2.board.allSunk()){\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    return {\r\n        Player1,\r\n        Player2,\r\n        defaultPos,\r\n        isFinished\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\n\r\nconst Buttons = (props) => {\r\n    const {shipSize, started, direction, changeDirection, restartGame} = props.values;\r\n\r\n    const sizeButton = (shipSize > 1) ? <button>Ship size: {shipSize}</button>: null;\r\n    const directionButton = (started) ? null : <button onClick={changeDirection}>{direction}</button>;\r\n    const restartButton = <button onClick={restartGame}>Restart</button>\r\n\r\n    return (\r\n        <div className = 'buttons'>\r\n            {restartButton}\r\n            {directionButton}\r\n            {sizeButton}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\n\r\nconst Result = (props) => {\r\n    const {winner} = props;\r\n    \r\n    const message = (winner) ? <h3>{winner} Wins!</h3>: null;\r\n\r\n    return (\r\n        <div className='message'>\r\n            {message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import React, {useState} from 'react';\r\nimport Table from './Table';\r\nimport Game from '../factories/Game';\r\nimport Buttons from './Buttons';\r\nimport Result from './Result';\r\n\r\nconst Board = () => {\r\n    const [newGame, setNewGame] = useState(Game());\r\n    const [started, setStarted] = useState(false);\r\n    const [resetKey, setResetKey] = useState(0);\r\n    const [shipSize, setShipSize] = useState(6);\r\n    const [direction, setDirection] = useState('horizontal');\r\n    const [winner, setWinner] = useState(null);\r\n    const user = newGame.Player1;\r\n    const pc = newGame.Player2;\r\n    const [userAlive, setUserAlive] = useState(4);\r\n    const [pcAlive, setPcAlive] = useState(4);\r\n\r\n    const restartGame = () => {\r\n        setNewGame(Game());\r\n        setStarted(false);\r\n        setResetKey(resetKey + 1)\r\n        setShipSize(6);\r\n        setWinner(null);\r\n        setUserAlive(4);\r\n        setPcAlive(4);\r\n    }\r\n\r\n    const changeDirection = () => {\r\n        if(direction === 'horizontal') {\r\n            setDirection('vertical')\r\n        }\r\n        else {\r\n            setDirection('horizontal')\r\n        }\r\n    }\r\n\r\n    const updateShipsAlive = () => {\r\n        if(shipSize > 1) {\r\n            setShipSize(shipSize - 1);\r\n        }\r\n    }\r\n\r\n    const updateAlive = (boardToUpdate) => {\r\n        if(boardToUpdate === 'Pc') {\r\n            let shipsAlive = pc.board.availableShips();\r\n            setPcAlive(shipsAlive);\r\n        }\r\n        else if(boardToUpdate === 'User') {\r\n            let shipsAlive = user.board.availableShips();\r\n            setUserAlive(shipsAlive);\r\n        }\r\n    }\r\n\r\n    const pcTurn = (mode) => {\r\n        let result;\r\n        if (mode === 'combo' || pc.possibleAttacks.length > 0) {\r\n            result = pc.combo(user.board);\r\n        }else {\r\n            result = pc.randomAttack(user.board);\r\n        }\r\n\r\n        if(result.isHit === null){\r\n\r\n        }\r\n        let boxAttacked = document.getElementById(`User${result.mov}`);\r\n        if (result.isHit) {\r\n            boxAttacked.className = 'hit-box';\r\n            pc.setPossibleAttacks(result.mov)\r\n            pcTurn('combo');\r\n        }else {\r\n            boxAttacked.className = 'no-hit-box';\r\n        }\r\n    }\r\n\r\n    const turns = (pos) => {\r\n        if(newGame.isFinished() || !started){\r\n            return null;\r\n        }\r\n        const attackHit = user.attack(pc.board, pos);\r\n        updateAlive('Pc')\r\n        if (attackHit === null){\r\n            return null\r\n        }\r\n        else if(!attackHit) {\r\n            pcTurn('random');\r\n        }\r\n        updateAlive('User')\r\n        displayWinner();\r\n        return attackHit;\r\n    }\r\n\r\n    const displayShips = (size, id, dir) => {\r\n       let boxAttacked;\r\n       if(dir === 'horizontal') {\r\n           const lastPos = parseInt(id) + size - 1;\r\n           for(let i = id; i <= lastPos; i++) {\r\n               boxAttacked = document.getElementById(`User${i}`);\r\n               if (boxAttacked.className !== 'box-selected') {\r\n                   boxAttacked.className = 'box-selected';\r\n                }\r\n            }\r\n       }\r\n       else if(dir ==='vertical') {\r\n           const lastPos = id + (size-1)*10;\r\n           for(let i = id; i <= lastPos; i+= 10) {\r\n               boxAttacked = document.getElementById(`User${i}`);\r\n               if (boxAttacked.className !== 'box-selected') {\r\n                   boxAttacked.className = 'box-selected';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const placeFleets = (id) => {\r\n        if(!started) {\r\n            const userResult = user.board.placeShip(shipSize, id, direction);\r\n            if(userResult) {\r\n                displayShips(shipSize, id, direction);\r\n                pc.randomPlace(shipSize);\r\n                updateShipsAlive();\r\n                if(shipSize === 2) {\r\n                    setStarted(true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const displayWinner = () => {\r\n        if(newGame.isFinished() && started) {\r\n            if(user.board.allSunk()) {\r\n                setWinner('Pc')\r\n            }\r\n            else if(pc.board.allSunk()) {\r\n                setWinner('User');\r\n            }\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    const instruction = (started) ? <h3>Attack the enemy</h3>: <h3> Place your ships on the User Board</h3>\r\n    const buttonValues = {shipSize, started, direction, changeDirection, restartGame};\r\n    const tableValues = {turns, placeFleets, started};\r\n    const userValues = {tableName: 'User', status: userAlive};\r\n    const pcValues = {tableName: 'Pc', status: pcAlive};\r\n    const pcTable = (started) ? <Table key={`B${resetKey}`} values={{...tableValues, ...pcValues}}/> : null;\r\n\r\n    return (\r\n        <div className='board'>\r\n            <div className = 'buttons-ins'>\r\n                {instruction}\r\n                <Buttons values={buttonValues}/>\r\n                <Result winner={winner}/>\r\n            </div>\r\n            <div className='tables-display'>\r\n                <Table\r\n                    key={`A${resetKey}`}\r\n                    values={{...tableValues, ...userValues}}\r\n                />\r\n                {pcTable}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;","const Footer = () => {\r\n    return (\r\n        <div className='footer'>\r\n            <a href=\"https://github.com/sebapkfd/battleship\" target=\"_blank\" rel=\"noreferrer\">\r\n                <img src=\"https://img.icons8.com/fluent/48/000000/github.png\" alt=\"Github\" id=\"Repo\"/>\r\n            </a>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Footer;","import './App.css';\r\nimport Title from './components/Title';\r\nimport Board from './components/Board';\r\nimport Footer from './components/Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Title/>\r\n      <Board/>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}