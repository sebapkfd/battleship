{"version":3,"sources":["components/Title.js","factories/Ship.js","factories/Gameboard.js","factories/Player.js","factories/Game.js","components/Buttons.js","components/Result.js","components/BoardInfo.js","components/Box.js","components/TableInfo.js","components/Table.js","components/Tables.js","components/displayShips.js","components/Board.js","components/Footer.js","App.js","index.js"],"names":["Title","className","Ship","size","status","Array","fill","hit","position","isSunk","includes","Gameboard","positions","map","item","occupied","ship","shipPos","isHit","ships","placeShip","cord","dir","newShip","lastPos","Math","floor","i","push","placeHorizontally","placeVertically","receiveAttack","allSunk","aux","forEach","availableShips","count","Player","board","posHit","possibleAttacks","randomAttack","enemyBoard","length","mov","random","setPossibleAttacks","pos","combo","indexToAttack","splice","randomPlace","attack","turn","mode","userBoard","result","boxAttacked","document","getElementById","Game","user","pc","winner","started","defaultPos","isFinished","Buttons","props","values","shipSize","direction","changeDirection","restartGame","sizeButton","directionButton","onClick","restartButton","Result","message","BoardInfo","buttonValues","instruction","Box","id","tableName","useState","boxType","setBoxType","attackResult","TableInfo","info","tableStatus","Table","turns","placeFleets","boxArray","Tables","resetKey","tableValues","pcValues","userValues","pcTable","displayShips","parseInt","Board","gamePlay","setGamePlay","setResetKey","setShipSize","setDirection","userAlive","setUserAlive","pcAlive","setPcAlive","updateAlive","boardToUpdate","shipsAlive","displayWinner","gameValues","attackHit","Footer","href","target","rel","src","alt","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.176f2de3.chunk.js","sourcesContent":["const Title = () => {\r\n    return (\r\n        <div className=\"title\">\r\n            <h1>BattleShip</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title;","const Ship = (size) => {\r\n\r\n    const status = Array(size).fill(false)\r\n\r\n    const hit = (position) => {\r\n        if(!status[position]) {\r\n            status[position] = true;\r\n        }\r\n    }\r\n\r\n    const isSunk = () => {\r\n        return !status.includes(false)\r\n    }\r\n\r\n    const newShip = {\r\n        size,\r\n        status,\r\n        hit,\r\n        isSunk\r\n    }\r\n    \r\n    return newShip;\r\n}\r\n\r\nexport default Ship;","import Ship from './Ship';\r\n\r\nconst Gameboard = () => {\r\n\r\n    let positions = [...Array(100)].map(item => {\r\n        return {occupied: false, ship: null, shipPos: null, isHit: false}\r\n    })\r\n\r\n    let ships = [];\r\n\r\n    const placeVertically = (ship, cord) => {\r\n        const lastPos = cord + (ship.size-1)*10;\r\n        if(lastPos > 99) {\r\n            return false\r\n        }\r\n\r\n        for(let i = cord; i <= lastPos; i+= 10) {\r\n            if(positions[i].occupied) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for(let i = cord; i <= lastPos; i+= 10) {\r\n            positions[i].ship = ship;\r\n            positions[i].occupied = true;\r\n            positions[i].shipPos = (i - cord)/10;\r\n        }\r\n        ships.push(ship);\r\n        return true;\r\n    }\r\n\r\n    const placeHorizontally = (ship, cord) => {\r\n        const lastPos = cord + ship.size - 1;\r\n        if(Math.floor(cord/10) !== Math.floor(lastPos/10)) {\r\n            return false\r\n        }\r\n\r\n        for(let i = cord; i <= lastPos; i++) {\r\n            if(positions[i].occupied){\r\n                return false\r\n            }\r\n        }\r\n\r\n        for(let i = cord; i <= lastPos; i++) {\r\n            positions[i].ship = ship;\r\n            positions[i].occupied = true;\r\n            positions[i].shipPos = i - cord;\r\n        }\r\n        ships.push(ship);\r\n        return true;\r\n    }\r\n\r\n    const placeShip = (size, cord, dir) => {\r\n        let newShip = Ship(size);\r\n        if(dir === 'horizontal'){\r\n            return placeHorizontally(newShip, cord);\r\n        }\r\n       return placeVertically(newShip, cord);\r\n    }\r\n\r\n    const receiveAttack = (cord) => {\r\n        if(!positions[cord].occupied) {\r\n            positions[cord].isHit = true;\r\n            return false\r\n        }\r\n        else if (positions[cord].occupied) {\r\n            positions[cord].isHit = true;\r\n            positions[cord].ship.hit(positions[cord].shipPos)\r\n            return true\r\n        }\r\n    }\r\n    \r\n    const allSunk = () => {\r\n        let aux = true;\r\n        ships.forEach(ship => {\r\n            if(!ship.isSunk()){\r\n                aux = false;\r\n            }\r\n        })\r\n        return aux;\r\n    }\r\n\r\n    const availableShips = () => {\r\n        let count = 0;\r\n        ships.forEach(ship => {\r\n            if(!ship.isSunk()){\r\n                count++;\r\n            }\r\n        })\r\n        return count;\r\n    }\r\n\r\n    const board = {\r\n        positions,\r\n        placeShip,\r\n        receiveAttack,\r\n        allSunk,\r\n        availableShips\r\n    };\r\n\r\n    return board;\r\n}\r\n\r\nexport default Gameboard;","import Gameboard from './Gameboard'\r\n\r\nconst Player = () => {\r\n    const board = Gameboard();\r\n    const posHit = [];\r\n    let possibleAttacks = [];\r\n\r\n    const randomAttack = (enemyBoard) => {\r\n        if(posHit.length === 100) {\r\n            return {isHit: null, mov: -1}\r\n        }\r\n        let mov;\r\n        while (true) {\r\n            mov = Math.floor(Math.random() * 100); \r\n            if(!posHit.includes(mov)){\r\n                break;\r\n            }\r\n        }\r\n        const isHit = enemyBoard.receiveAttack(mov);\r\n        posHit.push(mov);\r\n        return {isHit, mov};\r\n    }\r\n\r\n    const setPossibleAttacks = (pos) => {\r\n        if(pos + 10 < 99 && !posHit.includes(pos + 10) && !possibleAttacks.includes(pos + 10)) {\r\n            possibleAttacks.push(pos + 10);\r\n        }\r\n        if(pos - 10 > 0 && !posHit.includes(pos - 10) && !possibleAttacks.includes(pos - 10)) {\r\n            possibleAttacks.push(pos - 10);\r\n        }\r\n        if( !(pos%10 === 0 && (pos - 1)%10 === 9) && !posHit.includes(pos - 1) && (pos - 1 >= 0) && !possibleAttacks.includes(pos - 1)) {\r\n            possibleAttacks.push(pos - 1)\r\n        }\r\n        if( !(pos%10 === 9 && (pos + 1)%10 === 0) && !posHit.includes(pos + 1) && (pos + 1 <= 99) && !possibleAttacks.includes(pos + 1)) {\r\n            possibleAttacks.push(pos + 1)\r\n        }\r\n    }\r\n\r\n    const combo = (enemyBoard) => {\r\n        if (possibleAttacks.length === 0) {\r\n            return randomAttack(enemyBoard);\r\n        }\r\n        else {\r\n            let indexToAttack = Math.floor(Math.random() * possibleAttacks.length);\r\n            let mov = possibleAttacks[indexToAttack];\r\n            possibleAttacks.splice(indexToAttack, 1)\r\n            const isHit = enemyBoard.receiveAttack(mov);\r\n            posHit.push(mov);\r\n            return {isHit, mov};\r\n        }\r\n    }\r\n\r\n    const randomPlace = (size) => {\r\n        let pos;\r\n        let dirOpt = ['horizontal', 'vertical'];\r\n        let dir = dirOpt[Math.floor(Math.random() * 2)];\r\n        while (true) {\r\n            pos = Math.floor(Math.random() * 100);\r\n            if(board.placeShip(size, pos, dir)){\r\n                break\r\n            }\r\n        }\r\n        return pos\r\n    }\r\n\r\n    const attack = (enemyBoard, pos) => {\r\n        if(posHit.length === 100 || posHit.includes(pos)) {\r\n            return null\r\n        }\r\n        const isHit = enemyBoard.receiveAttack(pos);\r\n        posHit.push(pos);\r\n        return isHit;\r\n    }\r\n\r\n    const turn = (mode, userBoard) => {\r\n        let result = (mode === 'combo' || possibleAttacks.length > 0) ? (\r\n            combo(userBoard)\r\n        ) : (\r\n            randomAttack(userBoard)\r\n        )\r\n\r\n        if(result.isHit !== null){\r\n            let boxAttacked = document.getElementById(`User${result.mov}`);\r\n            if (result.isHit) {\r\n                boxAttacked.className = 'hit-box';\r\n                setPossibleAttacks(result.mov);\r\n                turn('combo', userBoard);\r\n            }\r\n            else {\r\n                boxAttacked.className = 'no-hit-box';\r\n            }\r\n        }\r\n    }\r\n\r\n    const User = {\r\n        board,\r\n        possibleAttacks,\r\n        randomAttack,\r\n        randomPlace,\r\n        attack,\r\n        combo,\r\n        setPossibleAttacks,\r\n        turn\r\n    }\r\n\r\n    return User;\r\n}\r\n\r\nexport default Player;","import Player from './Player';\r\n\r\nconst Game = () => {\r\n    const user = Player();\r\n    const pc = Player();\r\n    let winner = null;\r\n    let started = false;\r\n\r\n    const defaultPos = () => {\r\n        for(let i = 0; i < 1; i++){\r\n            user.board.placeShip(3, 0);\r\n            pc.board.placeShip(3, 0);\r\n        }\r\n        return true\r\n    }\r\n\r\n    const isFinished = () => {\r\n        return (user.board.allSunk() || pc.board.allSunk()) ? true : false;\r\n    }\r\n\r\n    return {\r\n        user,\r\n        pc,\r\n        winner,\r\n        started,\r\n        defaultPos,\r\n        isFinished\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\n\r\nconst Buttons = (props) => {\r\n    const {shipSize, started, direction, changeDirection, restartGame} = props.values;\r\n\r\n    const sizeButton = (shipSize > 1) ? <button>Ship size: {shipSize}</button>: null;\r\n    const directionButton = (started) ? null : <button onClick={changeDirection}>{direction}</button>;\r\n    const restartButton = <button onClick={() => restartGame()}>Restart</button>\r\n\r\n    return (\r\n        <div className='buttons'>\r\n            {restartButton}\r\n            {directionButton}\r\n            {sizeButton}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\n\r\nconst Result = (props) => {\r\n    const {winner} = props;\r\n    const message = (winner) ? <h3>{winner} Wins!</h3>: null;\r\n\r\n    return (\r\n        <div className='message'>\r\n            {message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import Buttons from \"./Buttons\";\r\nimport Result from \"./Result\";\r\n\r\nconst BoardInfo = (props) => {\r\n    const { started, buttonValues, winner } = props.values;\r\n    const instruction = (started) ? <h3>Attack the enemy</h3>: <h3> Place your ships on the Board</h3>;\r\n\r\n    return (\r\n        <div className = 'buttons-ins'>\r\n            {instruction}\r\n            <Buttons values={buttonValues} />\r\n            <Result winner={winner} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default BoardInfo;","import React, {useState} from 'react';\r\n\r\nconst Box = (props) => {\r\n    const {id, attack, tableName} = props.values;\r\n    const [boxType, setBoxType] = useState('box');\r\n\r\n    const handleClick = () => {\r\n        if(tableName === 'Pc'){\r\n            const attackResult = attack(id);\r\n            if (attackResult !== null) {\r\n                (attackResult) ? setBoxType('hit-box') : setBoxType('no-hit-box');\r\n            }\r\n            return\r\n        }\r\n        return attack(id);\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={boxType}\r\n            id={`${tableName}${id}`}\r\n            onClick={handleClick}\r\n        >\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Box;","const TableInfo = (props) => {\r\n    const {tableName, status, started} = props.info;\r\n    const tableStatus = (started) ? <h2>{status} Ships Available {started}</h2>: null;\r\n\r\n    return (\r\n        <div className='table-info'>\r\n            <h2>{tableName} Board</h2>\r\n            {tableStatus}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableInfo;","import React from 'react';\r\nimport Box from './Box';\r\nimport TableInfo from './TableInfo'\r\n\r\nconst Table = (props) => {\r\n    const {turns, placeFleets, started, tableName, status} = props.values;\r\n\r\n    const attack = (pos) => {\r\n        return (tableName === 'Pc') ? turns(pos) : placeFleets(pos);\r\n    }\r\n\r\n    const boxArray = [...Array(100)].map((item, i) => {\r\n        return <Box key={i} values={{attack, tableName, id: i}}/>\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <TableInfo info={{tableName, started, status}}/>\r\n            <div className='table'>\r\n                {boxArray}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;","import Table from \"./Table\";\r\n\r\nconst Tables = (props) => {\r\n    const { started, resetKey, tableValues, pcValues, userValues} = props.values;\r\n    const pcTable = (started) ? <Table key={`B${resetKey}`} values={{...tableValues, ...pcValues}}/> : null;\r\n\r\n    return (\r\n        <div className='tables-display'>\r\n            <Table\r\n                key={`A${resetKey}`}\r\n                values={{...tableValues, ...userValues}}\r\n            />\r\n            {pcTable}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tables;","const displayShips = (size, id, dir) => {\r\n   let boxAttacked;\r\n   if(dir === 'horizontal') {\r\n       const lastPos = parseInt(id) + size - 1;\r\n       for(let i = id; i <= lastPos; i++) {\r\n           boxAttacked = document.getElementById(`User${i}`);\r\n           if (boxAttacked.className !== 'box-selected') {\r\n               boxAttacked.className = 'box-selected';\r\n            }\r\n        }\r\n   }\r\n   else if(dir ==='vertical') {\r\n       const lastPos = id + (size-1)*10;\r\n       for(let i = id; i <= lastPos; i+= 10) {\r\n           boxAttacked = document.getElementById(`User${i}`);\r\n           if (boxAttacked.className !== 'box-selected') {\r\n               boxAttacked.className = 'box-selected';\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default displayShips","import React, {useState} from 'react';\r\nimport Game from '../factories/Game';\r\nimport BoardInfo from './BoardInfo';\r\nimport Tables from './Tables';\r\nimport displayShips from './displayShips';\r\n\r\nconst Board = () => {\r\n    const [gamePlay, setGamePlay] = useState(Game());\r\n    const { user, pc, started, winner } = gamePlay;\r\n    const [resetKey, setResetKey] = useState(0);\r\n    const [shipSize, setShipSize] = useState(6);\r\n    const [direction, setDirection] = useState('horizontal');\r\n    const [userAlive, setUserAlive] = useState(5);\r\n    const [pcAlive, setPcAlive] = useState(5);\r\n\r\n    const restartGame = () => {\r\n        setGamePlay(Game());\r\n        setResetKey(resetKey + 1);\r\n        setShipSize(6);\r\n        setUserAlive(5);\r\n        setPcAlive(5);\r\n    }\r\n\r\n    const changeDirection = () => {\r\n        (direction === 'horizontal') ? setDirection('vertical') : setDirection('horizontal');\r\n    }\r\n\r\n    const updateShipsAlive = () => {\r\n        if(shipSize > 1) {\r\n            setShipSize(shipSize - 1);\r\n        }\r\n    }\r\n\r\n    const updateAlive = (boardToUpdate) => {\r\n        if(boardToUpdate === 'Pc') {\r\n            let shipsAlive = pc.board.availableShips();\r\n            setPcAlive(shipsAlive);\r\n        }\r\n        else if(boardToUpdate === 'User') {\r\n            let shipsAlive = user.board.availableShips();\r\n            setUserAlive(shipsAlive);\r\n        }\r\n    }\r\n\r\n    const turns = (pos) => {\r\n        if(gamePlay.isFinished() || !started) {\r\n            return null;\r\n        }\r\n        const attackHit = user.attack(pc.board, pos);\r\n        updateAlive('Pc');\r\n        if(attackHit === null) {\r\n            return null;\r\n        }\r\n        else if(!attackHit) {\r\n            pc.turn('random', user.board)\r\n        }\r\n        updateAlive('User');\r\n        displayWinner();\r\n        return attackHit;\r\n    }\r\n\r\n    const placeFleets = (id) => {\r\n        if(!started) {\r\n            const userResult = user.board.placeShip(shipSize, id, direction);\r\n            if(userResult) {\r\n                displayShips(shipSize, id, direction);\r\n                pc.randomPlace(shipSize);\r\n                updateShipsAlive();\r\n                if(shipSize === 2) {\r\n                    setGamePlay({...gamePlay, started: true});\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const displayWinner = () => {\r\n        if(gamePlay.isFinished() && started) {\r\n            if(user.board.allSunk()) {\r\n                setGamePlay({...gamePlay, winner: 'Pc'});\r\n            }\r\n            else if(pc.board.allSunk()) {\r\n                setGamePlay({...gamePlay, winner: 'User'});\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    const buttonValues = {shipSize, started, direction, changeDirection, restartGame};\r\n    const tableValues = {turns, placeFleets, started};\r\n    const userValues = {tableName: 'User', status: userAlive};\r\n    const pcValues = {tableName: 'Pc', status: pcAlive};\r\n    const gameValues = {started, resetKey, tableValues, pcValues, userValues};\r\n\r\n    return (\r\n        <div className='board'>\r\n            <BoardInfo values={{started, buttonValues, winner}} />\r\n            <Tables values={gameValues} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;","const Footer = () => {\r\n    return (\r\n        <div className='footer'>\r\n            <a href=\"https://github.com/sebapkfd/battleship\" target=\"_blank\" rel=\"noreferrer\">\r\n                <img src=\"https://img.icons8.com/fluent/48/000000/github.png\" alt=\"Github\" id=\"repo\"/>\r\n            </a>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Footer;","import './App.css';\r\nimport Title from './components/Title';\r\nimport Board from './components/Board';\r\nimport Footer from './components/Footer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Title/>\r\n      <Board/>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}