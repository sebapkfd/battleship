{"version":3,"sources":["components/Title.js","components/Box.js","components/Table.js","factories/Ship.js","factories/Gameboard.js","factories/Player.js","factories/Game.js","components/Buttons.js","components/Result.js","components/Board.js","App.js","index.js"],"names":["Title","className","Box","props","values","id","attack","tableName","useState","boxType","setBoxType","onClick","attackResult","Table","turns","placeFleets","started","status","boxArray","boxValues","pos","i","newBox","push","tableStatus","Ship","size","Array","fill","hit","position","isSunk","includes","Gameboard","positions","length","occupied","ship","shipPos","isHit","ships","placeShip","cord","dir","newShip","lastPos","Math","floor","placeHorizontally","placeVertically","receiveAttack","allSunk","aux","forEach","availableShips","count","Player","board","posHit","possibleAttacks","randomAttack","enemyBoard","mov","random","randomPlace","combo","indexToAttack","splice","setPossibleAttacks","Game","Player1","Player2","defaultPos","isFinished","Buttons","shipSize","direction","changeDirection","restartGame","sizeButton","directionButton","restartButton","Result","winner","message","Board","newGame","setNewGame","setStarted","resetKey","setResetKey","setShipSize","setDirection","setWinner","user","pc","userAlive","setUserAlive","pcAlive","setPcAlive","updateAlive","boardToUpdate","shipsAlive","pcTurn","mode","result","boxAttacked","document","getElementById","displayWinner","instruction","buttonValues","tableValues","attackHit","parseInt","displayShips","userValues","pcValues","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d79bfa82.chunk.js","sourcesContent":["const Title = () => {\n    return (\n        <div className=\"title\">\n            <h1>BattleShip</h1>\n        </div>\n    )\n}\n\nexport default Title;","import React, {useState} from 'react';\n\nconst Box = (props) => {\n    const {id, attack, tableName} = props.values;\n    const [boxType, setBoxType] = useState('box');\n\n    const handleClick = () => {\n        if(tableName === 'Pc'){\n            const attackResult = attack(id);\n            if (attackResult === null) {\n            }\n            else if(attackResult){\n                setBoxType('hit-box');\n            }else if(!attackResult){\n                setBoxType('no-hit-box');\n            }\n            return\n        }\n        return attack(id);\n    }\n\n    return (\n        <div \n            className={boxType}\n            id={`${tableName}${id}`}\n            onClick={handleClick}\n        >\n        </div>\n    )\n}\n\nexport default Box;","import React from 'react';\nimport Box from './Box';\n\nconst Table = (props) => {\n    const {turns, placeFleets, started, tableName, status} = props.values;\n\n    const attack = (pos) => {\n        if(tableName === 'Pc'){\n            return turns(pos);   \n        }\n        return placeFleets(pos);\n    }\n\n    const boxArray = [];\n    const boxValues = {attack, tableName}\n    for (let i = 0; i < 100; i++) {\n        let newBox = <Box key={i} values={{...boxValues, id: i}}/>\n        boxArray.push(newBox);\n    }\n\n    const tableStatus = (started) ? <h2>{status} Ships Available {started}</h2>: null;\n\n    return (\n        <div>\n            <div className='table-name'>\n                <h2>{tableName} Board</h2>\n            </div>\n            <div className='table-status'>\n                {tableStatus}\n            </div>\n            <div className='table'>\n                {boxArray}\n            </div>\n        </div>\n    )\n}\n\nexport default Table;","const Ship = (size) => {\n\n    const status = Array(size).fill(false)\n\n    const hit = (position) => {\n        if(!status[position]) {\n            status[position] = true;\n        }\n    }\n\n    const isSunk = () => {\n        return !status.includes(false)\n    }\n\n    const newShip = {\n        size,\n        status,\n        hit,\n        isSunk\n    }\n    \n    return newShip;\n}\n\nexport default Ship;","import Ship from './Ship';\n\nconst Gameboard = () => {\n    \n    let positions = Array(100);\n    for (let i = 0; i < positions.length; i++) {\n        positions[i] = {\n            occupied: false,\n            ship: null,\n            shipPos: null,\n            isHit: false\n        }\n    }\n    let ships = [];\n\n    const placeVertically = (ship, cord) => {\n        const lastPos = cord + (ship.size-1)*10;\n        if(lastPos > 99) {\n            return false\n        }\n\n        for(let i = cord; i <= lastPos; i+= 10) {\n            if(positions[i].occupied) {\n                return false;\n            }\n        }\n\n        for(let i = cord; i <= lastPos; i+= 10) {\n            positions[i].ship = ship;\n            positions[i].occupied = true;\n            positions[i].shipPos = (i - cord)/10;\n        }\n        ships.push(ship);\n        return true;\n    }\n\n    const placeHorizontally = (ship, cord) => {\n        const lastPos = cord + ship.size - 1;\n        if(Math.floor(cord/10) !== Math.floor(lastPos/10)) {\n            return false\n        }\n\n        for(let i = cord; i <= lastPos; i++) {\n            if(positions[i].occupied){\n                return false\n            }\n        }\n\n        for(let i = cord; i <= lastPos; i++) {\n            positions[i].ship = ship;\n            positions[i].occupied = true;\n            positions[i].shipPos = i - cord;\n        }\n        ships.push(ship);\n        return true;\n    }\n\n    const placeShip = (size, cord, dir) => {\n        let newShip = Ship(size);\n        if(dir === 'horizontal'){\n            return placeHorizontally(newShip, cord);\n        }\n       return placeVertically(newShip, cord);\n    }\n\n    const receiveAttack = (cord) => {\n        if(!positions[cord].occupied) {\n            positions[cord].isHit = true;\n            return false\n        }\n        else if (positions[cord].occupied) {\n            positions[cord].isHit = true;\n            positions[cord].ship.hit(positions[cord].shipPos)\n            return true\n        }\n    }\n    \n    const allSunk = () => {\n        let aux = true;\n        ships.forEach(ship => {\n            if(ship.isSunk() === false){\n                aux = false;\n            }\n        })\n        return aux;\n    }\n\n    const availableShips = () => {\n        let count = 0;\n        ships.forEach(ship => {\n            if(ship.isSunk() === false){\n                count++;\n            }\n        })\n        return count;\n    }\n\n    const board = {\n        positions,\n        placeShip,\n        receiveAttack,\n        allSunk,\n        availableShips\n    };\n\n    return board;\n}\n\nexport default Gameboard;","import Gameboard from './Gameboard'\n\nconst Player = () => {\n    const board = Gameboard();\n    const posHit = [];\n    let possibleAttacks = [];\n\n    const randomAttack = (enemyBoard) => {\n        if(posHit.length === 100) {\n            return {isHit: null, mov: -1}\n        }\n        let mov;\n        while (true) {\n            mov = Math.floor(Math.random() * 100); \n            if(!posHit.includes(mov)){\n                break;\n            }\n        }\n        const isHit = enemyBoard.receiveAttack(mov);\n        posHit.push(mov);\n        return {isHit, mov};\n    }\n\n    const setPossibleAttacks = (pos) => {\n        if(pos + 10 < 99 && !posHit.includes(pos + 10) && !possibleAttacks.includes(pos + 10)) {\n            possibleAttacks.push(pos + 10);\n        }\n        if(pos - 10 > 0 && !posHit.includes(pos - 10) && !possibleAttacks.includes(pos - 10)) {\n            possibleAttacks.push(pos - 10);\n        }\n        if( !(pos%10 === 0 && (pos - 1)%10 === 9) && !posHit.includes(pos - 1) && (pos - 1 >= 0) && !possibleAttacks.includes(pos - 1)) {\n            possibleAttacks.push(pos - 1)\n        }\n        if( !(pos%10 === 9 && (pos + 1)%10 === 0) && !posHit.includes(pos + 1) && (pos + 1 <= 99) && !possibleAttacks.includes(pos + 1)) {\n            possibleAttacks.push(pos + 1)\n        }\n    }\n\n    const combo = (enemyBoard) => {\n        if (possibleAttacks.length === 0) {\n            return randomAttack(enemyBoard);\n        }\n        else {\n            let indexToAttack = Math.floor(Math.random() * possibleAttacks.length);\n            let mov = possibleAttacks[indexToAttack];\n            possibleAttacks.splice(indexToAttack, 1)\n            const isHit = enemyBoard.receiveAttack(mov);\n            posHit.push(mov);\n            return {isHit, mov};\n        }\n    }\n\n    const randomPlace = (size) => {\n        let pos;\n        let dirOpt = ['horizontal', 'vertical'];\n        let dir = dirOpt[Math.floor(Math.random() * 2)];\n        while (true) {\n            pos = Math.floor(Math.random() * 100);\n            if(board.placeShip(size, pos, dir)){\n                break\n            }\n        }\n        return pos\n    }\n\n    const attack = (enemyBoard, pos) => {\n        if(posHit.length === 100 || posHit.includes(pos)) {\n            return null\n        }\n        const isHit = enemyBoard.receiveAttack(pos);\n        posHit.push(pos);\n        return isHit;\n    }\n\n    const User = {\n        board,\n        possibleAttacks,\n        randomAttack,\n        randomPlace,\n        attack,\n        combo,\n        setPossibleAttacks\n    }\n\n    return User;\n}\n\nexport default Player;","import Player from './Player';\n\nconst Game = () => {\n    const Player1 = Player();\n    const Player2 = Player();\n\n    const defaultPos = () => {\n        for(let i = 0; i < 1; i++){\n            Player1.board.placeShip(3, 0);\n            Player2.board.placeShip(3, 0);\n        }\n        return true\n    }\n\n    const isFinished = () => {\n        if(Player1.board.allSunk() || Player2.board.allSunk()){\n            return true\n        }\n        return false\n    }\n\n    return {\n        Player1,\n        Player2,\n        defaultPos,\n        isFinished\n    }\n}\n\nexport default Game;","import React from 'react';\n\nconst Buttons = (props) => {\n    const {shipSize, started, direction, changeDirection, restartGame} = props.values;\n\n    const sizeButton = (shipSize > 1) ? <button>Ship size: {shipSize}</button>: null;\n    const directionButton = (started) ? null : <button onClick={changeDirection}>{direction}</button>;\n    const restartButton = <button onClick={restartGame}>Restart</button>\n\n    return (\n        <div className = 'buttons'>\n            {restartButton}\n            {directionButton}\n            {sizeButton}\n        </div>\n    )\n}\n\nexport default Buttons;","import React from 'react';\n\nconst Result = (props) => {\n    const {winner} = props;\n    \n    const message = (winner) ? <h3>{winner} Wins!</h3>: null;\n\n    return (\n        <div className='message'>\n            {message}\n        </div>\n    );\n}\n\nexport default Result;","import React, {useState} from 'react';\nimport Table from './Table';\nimport Game from '../factories/Game';\nimport Buttons from './Buttons';\nimport Result from './Result';\n\nconst Board = () => {\n    const [newGame, setNewGame] = useState(Game());\n    const [started, setStarted] = useState(false);\n    const [resetKey, setResetKey] = useState(0);\n    const [shipSize, setShipSize] = useState(6);\n    const [direction, setDirection] = useState('horizontal');\n    const [winner, setWinner] = useState(null);\n    const user = newGame.Player1;\n    const pc = newGame.Player2;\n    const [userAlive, setUserAlive] = useState(4);\n    const [pcAlive, setPcAlive] = useState(4);\n\n    const restartGame = () => {\n        setNewGame(Game());\n        setStarted(false);\n        setResetKey(resetKey + 1)\n        setShipSize(6);\n        setWinner(null);\n        setUserAlive(4);\n        setPcAlive(4);\n    }\n\n    const changeDirection = () => {\n        if(direction === 'horizontal') {\n            setDirection('vertical')\n        }\n        else {\n            setDirection('horizontal')\n        }\n    }\n\n    const updateShipsAlive = () => {\n        if(shipSize > 1) {\n            setShipSize(shipSize - 1);\n        }\n    }\n\n    const updateAlive = (boardToUpdate) => {\n        if(boardToUpdate === 'Pc') {\n            let shipsAlive = pc.board.availableShips();\n            setPcAlive(shipsAlive);\n        }\n        else if(boardToUpdate === 'User') {\n            let shipsAlive = user.board.availableShips();\n            setUserAlive(shipsAlive);\n        }\n    }\n\n    const pcTurn = (mode) => {\n        let result;\n        if (mode === 'combo' || pc.possibleAttacks.length > 0) {\n            result = pc.combo(user.board);\n        }else {\n            result = pc.randomAttack(user.board);\n        }\n\n        if(result.isHit === null){\n\n        }\n        let boxAttacked = document.getElementById(`User${result.mov}`);\n        if (result.isHit) {\n            boxAttacked.className = 'hit-box';\n            pc.setPossibleAttacks(result.mov)\n            pcTurn('combo');\n        }else {\n            boxAttacked.className = 'no-hit-box';\n        }\n    }\n\n    const turns = (pos) => {\n        if(newGame.isFinished() || !started){\n            return null;\n        }\n        const attackHit = user.attack(pc.board, pos);\n        updateAlive('Pc')\n        if (attackHit === null){\n            return null\n        }\n        else if(!attackHit) {\n            pcTurn('random');\n        }\n        updateAlive('User')\n        displayWinner();\n        return attackHit;\n    }\n\n    const displayShips = (size, id, dir) => {\n       let boxAttacked;\n       if(dir === 'horizontal') {\n           const lastPos = parseInt(id) + size - 1;\n           for(let i = id; i <= lastPos; i++) {\n               boxAttacked = document.getElementById(`User${i}`);\n               if (boxAttacked.className !== 'box-selected') {\n                   boxAttacked.className = 'box-selected';\n                }\n            }\n       }\n       else if(dir ==='vertical') {\n           const lastPos = id + (size-1)*10;\n           for(let i = id; i <= lastPos; i+= 10) {\n               boxAttacked = document.getElementById(`User${i}`);\n               if (boxAttacked.className !== 'box-selected') {\n                   boxAttacked.className = 'box-selected';\n                }\n            }\n        }\n    }\n\n    const placeFleets = (id) => {\n        if(!started) {\n            const userResult = user.board.placeShip(shipSize, id, direction);\n            if(userResult) {\n                displayShips(shipSize, id, direction);\n                pc.randomPlace(shipSize);\n                updateShipsAlive();\n                if(shipSize === 2) {\n                    setStarted(true);\n                }\n            }\n        }\n    }\n\n    const displayWinner = () => {\n        if(newGame.isFinished() && started) {\n            if(user.board.allSunk()) {\n                setWinner('Pc')\n            }\n            else if(pc.board.allSunk()) {\n                setWinner('User');\n            }\n            return true\n        }\n        return false;\n    }\n    \n    const instruction = (started) ? <h3>Attack the enemy</h3>: <h3> Place your ships on the User Board</h3>\n    const buttonValues = {shipSize, started, direction, changeDirection, restartGame};\n    const tableValues = {turns, placeFleets, started};\n    const userValues = {tableName: 'User', status: userAlive};\n    const pcValues = {tableName: 'Pc', status: pcAlive};\n\n    return (\n        <div className='board'>\n            <div className = 'buttons-ins'>\n                {instruction}\n                <Buttons values={buttonValues}/>\n                <Result winner={winner}/>\n            </div>\n            <div className='tables-display'>\n                <Table\n                    key={`A${resetKey}`}\n                    values={{...tableValues, ...userValues}}\n                />\n                <Table\n                    key={`B${resetKey}`}\n                    values={{...tableValues, ...pcValues}}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default Board;","import './App.css';\nimport Title from './components/Title';\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Title/>\n      <Board/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}